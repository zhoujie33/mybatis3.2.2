<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

  <!--WEB容器的加载顺序是：ServletContext -> context-param -> listener -> filter -> servlet。并且这些元素可以配置在文件中的任意位置。-->
  <!-- 加载spring 核心 配置文件；-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>


  <!-- 配置spring 的监听文件；-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>


  <!-- 防止内存泄露 监听-->
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>

  <!-- 解决中文乱码问题的过滤器； -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!-- SpringMVC 的核心配置； -->
  <!--前端控制器配置，前端控制器实际上就是一个servlet-->
  <servlet>
    <servlet-name>springMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--通过contextConfigLocation配置spring mvc加载的配置文件如：处理器映射器、处理器适配器..
    如果不配置这个，则默认加载/WEB-INF/sevlet名称-sevlet.xml（springMVC-sevlet.xml）-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:applicationContext.xml</param-value><!--指定路径-->
    </init-param>
  </servlet>
  <!--处理器映射器-->
  <servlet-mapping>
    <servlet-name>springMVC</servlet-name>
    <!--此参数配置有以下方式
    1. *.action,访问以*.action结尾的地址由dispacherServlet(前端控制器)解析
    2. /，所有访问的地址由dispacherServlet(前端控制器)解析，对于静态文件解析需要不让
    dispacherServlet(前端控制器)解析，这种方式可以实现RESTFUL风格的url；
    3. /*，这种配置不对，使用这种方式最终要转发到一个jsp页面时，仍然由dispacherServlet(前端控制器)
    解析jsp地址，不能根据jsp地址找到Handler，会报错。
    -->
    <url-pattern>*.action</url-pattern>
  </servlet-mapping>
  <!--完成以上配置以后，接下来需要在classpath:applicationContext.xml文件中
  配置处理器映射器、处理器适配器、视图解析器-->


  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

</web-app>


